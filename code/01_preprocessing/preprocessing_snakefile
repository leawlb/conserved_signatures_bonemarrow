#!/bin/python 

#-------------------------------------------------------------------------------

import pandas as pd

# paths from config
METADATA_PATH = config["metadata"]["raw"]
OUTPUT_BASE_PATH = config["paths"]["preprocessing"]

# objects from config
IDENTIFIERS = config["metadata"]["identifiers"]
METADATA = pd.read_csv(config["metadata"]["raw"])
VALUES =  config["metadata"]["values"]

# get all possible wildcards from designated identifier(s)
# see snakemake-cellranger https://github.com/odomlab2/snakemake-cellranger
if not "individual" in METADATA.columns: 
    print('establishing "individual" column') 
    for i in IDENTIFIERS:
        if i == IDENTIFIERS[0]:
            METADATA["individual"] = METADATA[i].map(str)
        else: 
            METADATA["individual"] = METADATA["individual"] + '_' + METADATA[i].map(str)

# get unique targets
targets = METADATA["individual"]
targets = targets.drop_duplicates()
targets = targets.squeeze()
targets = targets.tolist()
print(targets)

# construct paths for all possible outputs, this is required for rule all
targets_02 = [OUTPUT_BASE_PATH + "/drop/" + "sce_" + x + "-02" for x in targets]
targets_03 = [OUTPUT_BASE_PATH + "/outl/" + "sce_" + x + "-03" for x in targets]
targets_04 = [OUTPUT_BASE_PATH + "/norm/" + "sce_" + x + "-04" for x in targets]
targets_05 = [OUTPUT_BASE_PATH + "/dimr/" + "sce_" + x + "-05" for x in targets]

targets_rp = ["reports/preprocessing_sample_report_"+ x + ".html" for x in targets]
target_srp = ["reports/preprocessing_summary.html"]

if config["run_preprocessing_summary"]: # only run summary_report if necessary
  targets_rp = targets_rp + target_srp

# local execution of non-demanding rules
localrules: remove_outliers, all  

#-------------------------------------------------------------------------------

# define rules
rule all: # must contain all possible output paths from all rules
    input:
        targets_02,
        targets_03,
        targets_04,
        targets_05,
        targets_rp

# remove empty droplets and doublets to retain only single cells
rule remove_droplets:
    input: 
        sce_01 = config["paths"]["cellranger_output"] + "{individual}"
    output:
        sce_02 = OUTPUT_BASE_PATH + "/drop/sce_{individual}-02"
    params:
        cutoff_umis = VALUES["cutoff_umis"],
        cutoff_doublets = VALUES["cutoff_doublets"]
    script:
        "scripts/02_remove_droplets.R"
        
# find outlier cells with low quality and remove them
rule remove_outliers:
    input: 
        sce_02 = rules.remove_droplets.output
    output:
        sce_03 = OUTPUT_BASE_PATH + "/outl/sce_{individual}-03"
    params:
        cutoff_sum = VALUES["cutoff_sum"],
        cutoff_detected = VALUES["cutoff_detected"]
    script:
        "scripts/03_remove_outliers.R"
        
# normalize expression on sample level
rule normalize_expr:
    input: 
        sce_03 = rules.remove_outliers.output
    output:
        sce_04 = OUTPUT_BASE_PATH + "/norm/sce_{individual}-04"
    script:
        "scripts/04_normalize_expr.R"
        
# extract hvgs and reduce dimensions for QC on sample level 
rule reduce_dims:
    input: 
        sce_04 = rules.normalize_expr.output
    output:
        sce_05 = OUTPUT_BASE_PATH + "/dimr/sce_{individual}-05"
    params:
        nr_hvgs = VALUES["nr_hvgs"]
    script:
        "scripts/05_reduce_dims.R"

# construct report files to monitor QC on sample level
rule make_report:
    input:
        sce_01 = config["paths"]["cellranger_output"] + "{individual}",
        sce_02 = rules.remove_droplets.output,
        sce_03 = rules.remove_outliers.output,
        sce_04 = rules.normalize_expr.output,
        sce_05 = rules.reduce_dims.output
    output:
        "reports/preprocessing_sample_report_{individual}.html"
    params:
        cutoff_umis = VALUES["cutoff_umis"],
        cutoff_doublets = VALUES["cutoff_doublets"],
        cutoff_sum = VALUES["cutoff_sum"],
        cutoff_detected = VALUES["cutoff_detected"],
        nr_hvgs = VALUES["nr_hvgs"]
    script:
        # .Rmd files should be stored in snakefile working directory
        "preprocessing_sample_reports.Rmd" 
        
# make one summary report on all files
"""
Because this rule is dependend on previous outputs but this is not reflected
in input, it's generally turned off in config to avoid premature job submission
"""
print(config["run_preprocessing_summary"])
if config["run_preprocessing_summary"]:
  rule make_summary_report:
      input:
          sce_02_path = OUTPUT_BASE_PATH + "/drop",
      output:
          "reports/preprocessing_summary.html"
      params:
          cutoff_sum = VALUES["cutoff_sum"],
          cutoff_detected = VALUES["cutoff_detected"],
          targets = targets
      script:
          "preprocessing_summary.Rmd" 
