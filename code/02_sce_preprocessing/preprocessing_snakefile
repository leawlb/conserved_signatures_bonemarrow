#!/bin/python 

#-------------------------------------------------------------------------------

import pandas as pd

# paths from config
METADATA_PATH = config["metadata"]["raw"]
OUTPUT_BASE_PATH = config["paths"]["output_dir"]

# objects from config
IDENTIFIER = config["metadata"]["identifier"]
METADATA = pd.read_csv(config["metadata"]["raw"])
CUTOFFS =  config["metadata"]["cutoffs"]

# get all possible wildcards from designated identifier
targets = METADATA[IDENTIFIER]
targets = targets.drop_duplicates()
targets = targets.squeeze()
targets = targets.tolist()

# construct paths for all possible outputs, this is required for rule all
targets_02 = [OUTPUT_BASE_PATH + "/drop/" + "sce_" + x + "-02" for x in targets]
targets_03 = [OUTPUT_BASE_PATH + "/outl/" + "sce_" + x + "-03" for x in targets]
targets_04 = [OUTPUT_BASE_PATH + "/norm/" + "sce_" + x + "-04" for x in targets]
targets_05 = [OUTPUT_BASE_PATH + "/dimr/" + "sce_" + x + "-05" for x in targets]

targets_rp = ["reports/preprocessing_report_"+ x + ".html" for x in targets]
target_srp = ["reports/summary_report.html"]

# local execution of non-demanding rules
localrules: remove_outliers, all  

# define rules
rule all: # must contain all possible output paths
    input:
        targets_02,
        targets_03,
        targets_04,
        targets_05,
        targets_rp,
        target_srp
        
# remove empty droplets and doublets to retain only single cells
rule remove_droplets:
    input: 
        sce_01 = config["paths"]["input_dir"] + "{Object_ID}"
    output:
        sce_02 = OUTPUT_BASE_PATH + "/drop/sce_{Object_ID}-02"
    params:
        cutoff_umis = CUTOFFS["cutoff_umis"],
        cutoff_doublets = CUTOFFS["cutoff_doublets"]
    script:
        "scripts/02_remove_droplets.R"
        
# find outlier cells with low quality and remove them
rule remove_outliers:
    input: 
        sce_02 = OUTPUT_BASE_PATH + "/drop/sce_{Object_ID}-02"
    output:
        sce_03 = OUTPUT_BASE_PATH + "/outl/sce_{Object_ID}-03"
    params:
        cutoff_sum = CUTOFFS["cutoff_sum"],
        cutoff_detected = CUTOFFS["cutoff_detected"]
    script:
        "scripts/03_remove_outliers.R"
        
# normalize expression on sample level
rule normalize_expr:
    input: 
        sce_03 = OUTPUT_BASE_PATH + "/outl/sce_{Object_ID}-03"
    output:
        sce_04 = OUTPUT_BASE_PATH + "/norm/sce_{Object_ID}-04"
    script:
        "scripts/04_normalize_expr.R"
        
# extract hvgs and reduce dimensions for QC on sample level 
rule reduce_dims:
    input: 
        sce_04 = OUTPUT_BASE_PATH + "/norm/sce_{Object_ID}-04"
    output:
        sce_05 = OUTPUT_BASE_PATH + "/dimr/sce_{Object_ID}-05"
    script:
        "scripts/05_reduce_dims.R"

# construct report files to monitor QC on sample level
rule make_report:
    input:
        sce_01 = config["paths"]["input_dir"] + "{Object_ID}",
        sce_02 = OUTPUT_BASE_PATH + "/drop/sce_{Object_ID}-02",
        sce_03 = OUTPUT_BASE_PATH + "/outl/sce_{Object_ID}-03",
        sce_04 = OUTPUT_BASE_PATH + "/norm/sce_{Object_ID}-04",
        sce_05 = OUTPUT_BASE_PATH + "/dimr/sce_{Object_ID}-05"
    output:
        "reports/preprocessing_report_{Object_ID}.html"
    params:
        cutoff_umis = CUTOFFS["cutoff_umis"],
        cutoff_doublets = CUTOFFS["cutoff_doublets"],
        cutoff_sum = CUTOFFS["cutoff_sum"],
        cutoff_detected = CUTOFFS["cutoff_detected"]
    script:
        "make_report.Rmd" # .Rmd files should be stored in the snakemake wd
        
print(OUTPUT_BASE_PATH + "/drop/")        
# make one summary report on all files
rule make_summary_report:
    input:
        #sce_01_path = config["paths"]["input_dir"],
        sce_02_path = OUTPUT_BASE_PATH + "/drop",
        sce_03_path = OUTPUT_BASE_PATH + "/outl",
        sce_04_path = OUTPUT_BASE_PATH + "/norm",
        sce_05_path = OUTPUT_BASE_PATH + "/dimr"
    output:
        "reports/summary_report.html"
    params:
        cutoff_umis = CUTOFFS["cutoff_umis"],
        cutoff_doublets = CUTOFFS["cutoff_doublets"],
        cutoff_sum = CUTOFFS["cutoff_sum"],
        cutoff_detected = CUTOFFS["cutoff_detected"],
        targets = targets
    script:
        "summary_report.Rmd" # .Rmd files should be stored in the snakemake wd
